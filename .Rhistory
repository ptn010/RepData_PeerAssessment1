##=============================================
lambda <- .2
k <- 2000       #number of exponentials in each sample
n <- 1000         #number of samples
mns <-NULL
cum_mn <-NULL
vars<-NULL
cum_var <-NULL
t_mean = 1/lambda
t_var = (1/lambda) / (k^.5)
##======Part2. SIMULATION and COMPUTATION OF means and variances======
for (i in 1:n) {
#mns is a vector where each member is the average value of sample i
mns = c(mns, mean(rexp(k, rate = lambda) ))
#cum_mn is a vector where each member is the mean of mean of sample 1 to sample i
if (i<100){#print(mns)
#print(mean(mns))
print(var(mns))}
cum_mn = c(cum_mn, sum(mns)/i)
#vars is a vector where each member is the variance of means of sample 1 to i
vars = c(vars, var(mns))
#print(vars)
#cum_var is a vector where each member is the mean of variances of sample 1 to sample i
#cum_var = c(cum_var, sum(vars)/i)
}
#plot means of each sample
plot(1:n, mns, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Means of each random sample on the same graph")
abline(h = 1/lambda, col = "blue")   #theoretical center of the distribution
#plot means of means: emprical center of distribution
plot(1:n, cum_mn, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size", main = "Center of distribution of all the samples ")
abline(h = t_mean, col = "blue")   #theoretical center of the distribution
#plot variable of means: how variable it is
plot(1:n, vars, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Variance of each random sample on the same graph")
abline(h = t_var, col = "blue")
##=============================================
abline(h = t_var, col = "blue")
##=======================================
abline(h = t_var, col = "blue")
abline(h = t_mean, col = "blue")
abline(h = t_var, col = "blue", add = T)
lambda <- .2
k <- 40  #number of exponentials in each sample
n <- 1000         #number of samples
mns <-NULL
cum_mn <-NULL
vars<-NULL
cum_var <-NULL
t_mean = 1/lambda
t_var = (1/lambda) / (k^.5)
##======Part2. SIMULATION and COMPUTATION OF means and variances======
for (i in 1:n) {
#mns is a vector where each member is the average value of sample i
mns = c(mns, mean(rexp(k, rate = lambda) ))
#cum_mn is a vector where each member is the mean of mean of sample 1 to sample i
cum_mn = c(cum_mn, sum(mns)/i)
#vars is a vector where each member is the variance of means of sample 1 to i
vars = c(vars, var(mns))
}
#plot means of each sample
plot(1:n, mns, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Means of each random sample on the same graph")
abline(h = 1/lambda, col = "blue")   #theoretical center of the distribution
#plot means of means: emprical center of distribution
plot(1:n, cum_mn, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size", main = "Center of distribution of all the samples ")
abline(h = t_mean, col = "blue")   #theoretical center of the distribution
#plot variable of means: how variable it is
plot(1:n, vars, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Variance of each random sample on the same graph")
abline(h = t_var, col = "blue")
plot(1:n, mns, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Means of each random sample on the same graph")
abline(h = 1/lambda, col = "blue")   #theoretical center of the distribution
#plot means of each sample
plot(1:n, mns, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Means of each random sample on the same graph")
abline(h = 1/lambda, col = "blue")   #theoretical center of the distribution
#plot means of means: emprical center of distribution
plot(1:n, cum_mn, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size", main = "Center of distribution of all the samples ")
abline(h = t_mean, col = "blue")   #theoretical center of the distribution
plot(1:n, vars, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample size", main = "Variance of distribution")
abline(h = t_var, col = "blue")
t_var = (1/lambda)^2 / k
t_var_s = (1/lambda)^2 / (k-1)
plot(1:n, vars, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample size", main = "Variance of distribution")
abline(h = t_var, col = "blue")
abline(h = t_var_s, col = "green")
lambda <- .2
k <- 40  #number of exponentials in each sample
n <- 1000         #number of samples
mns <-NULL
cum_mn <-NULL
vars<-NULL
cum_var <-NULL
t_mean = 1/lambda
t_var_p = (1/lambda)^2 / k
t_var_s = (1/lambda)^2 / (k-1)
##======Part2. SIMULATION and COMPUTATION OF means and variances======
for (i in 1:n) {
#mns is a vector where each member is the average value of sample i
mns = c(mns, mean(rexp(k, rate = lambda) ))
#cum_mn is a vector where each member is the mean of mean of sample 1 to sample i
cum_mn = c(cum_mn, sum(mns)/i)
#vars is a vector where each member is the variance of means of sample 1 to i
vars = c(vars, var(mns))
}
#plot means of each sample
plot(1:n, mns, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample index", main = "Means of each random sample on the same graph")
abline(h = 1/lambda, col = "blue")   #theoretical center of the distribution
#plot means of means: emprical center of distribution
plot(1:n, cum_mn, type = "l", lwd = 2, frame = FALSE, ylab = "cumulative means",
xlab = "sample size", main = "Center of distribution of all the samples ")
abline(h = t_mean, col = "blue")   #theoretical center of the distribution
#plot variable of means: how variable it is
plot(1:n, vars, type = "l", lwd = 2, frame = FALSE, ylab = "means",
xlab = "sample size", main = "Variance of distribution")
abline(h = t_var_p, col = "blue")
abline(h = t_var_s, col = "green")
##=============================================
hist((mns-t_var)/sqrt(t_var))
hist((mns-t_var)/sqrt(t_var), prob = TRUE)
hist((mns-t_mean)/sqrt(t_var), prob = TRUE)
x=seq(-4,4,length=200)
y=1/sqrt(2*pi)*exp(-x^2/2)
plot(x,y,type="l",lwd=2,col="red")
hist((mns-t_mean)/sqrt(t_var), prob = TRUE, add = TRUE)
hist(mns)
hist(mns, prob = TRUE)
x=seq(-4+t_mean,4+t_mean,length=200)
y=1/sqrt(2*pi)*exp(-x^2/(2*t_var)*(1/sqrt(t_var_p))
y=1/sqrt(2*pi)*exp(-x^2/(2*t_var)*(1/sqrt(t_var_p)))
x=seq(-4+t_mean,4+t_mean,length=200)
y=1/sqrt(2*pi)*exp(-x^2/(2*t_var)*(1/sqrt(t_var_p))
x=seq(-4+t_mean,4+t_mean,length=200)
y=1/sqrt(2*pi)*exp(-x^2/(2*t_var))*(1/sqrt(t_var_p))
plot(x,y,type="l",lwd=2,col="red")
data("ToothGrowth")
data <-data("ToothGrowth")
summary(data)
head(data)
help("ToothGrowth")
mean(data$len)
ToothGrowht$len
ToothGrowth$len
head(ToothGrowth)
plot(ToothGrowth)
mean(ToothGrowth$len)
plot(ToothGrowth$len, ToothGrowth$dose)
plot(ToothGrowth$len, ToothGrowth$supp)
dimnames(ToothGrowth$supp)
names(ToothGrowth$supp)
table(ToothGrowth$supp)
demo()
str(str)
str(lm)
str(airquality)
set.seed(1)
rpois(5, 2)set.seed(1)
rpois(5, 2)
?rbinom
rbinom(10,10,0.5)
rbinom(10,1,0.5)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x1<-x
x2<-x-1
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
system.time()
system.time(lm)
system.time(lm(y~x))
swirl()
library(swirl)
rm(list=ls())
swirl()
5+7
x<-5+8
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z,555)
c(z,555,z)
z*2+100
my_sqrt <-sqrt(z-1)
my_sqrt
my_div <-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+100
z*2+1000
my_div
exit()
quit()
data1<-fread("./MOOCOURSE/GettingData/quiz1_1.csv",
sep = ",", header=TRUE)
library(data.table)
data1<-fread("./MOOCOURSE/GettingData/quiz1_1.csv",
sep = ",", header=TRUE)
table(data1$VAL)
data1[, .N, by = VAL]
table(data1$FES)
class(data1$FES)
fUrl2<-"
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2.xlsx")
fUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2.xlsx")
AB<-read.xlsx("C:/AB_DNA_Tag_Numbers.xlsx","DNA_Tag_Numbers")
data1<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx")
install.packages(xlsx)
install.packages("xlsx"")
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
data2<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx")
?read.xlsx
data2<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx", sheetName = “NGAP Sample Data”)
data2<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx", sheetName = "NGAP Sample Data")
fUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2_again.xlsx", method = "curl")
?fread
?read.xlsx
data2<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx", sheetIndex = 1)
View(data2)
View(data2)
data2<-read.xlsx("./MOOCOURSE/GettingData/quiz1_2.xlsx", sheetIndex = 1,
rowIndex = 18:23, colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(data2$Zip*dat$Ext,na.rm=T)
sum(data2$Zip*data2$Ext,na.rm=T)
library(xml)
library(XML)
data3 <- xmlTreeParse(fUrl3, useInternal = TRUE)
fUrl3 <-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data3 <- xmlTreeParse(fUrl3, useInternal = TRUE)
fUrl3 <-
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data3 <- xmlTreeParse(fUrl3, useInternal = TRUE)
fUrl3 <-
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data3 <- xmlTreeParse(fUrl3, useInternal = TRUE)
fUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2_again.xlsx",
method = "wb")
fUrl2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2_again.xlsx",
method = "wb")
download.file(fUrl2, destfile = "./MOOCOURSE/GettingData/quiz1_2_again.xlsx",
mode = "wb")
fUrl3 <-
"http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
#download.file(fUrl3, destfile = "quiz1_rest.xml")
data3 <- xmlTreeParse(fUrl3, useInternal = TRUE)
zip_vector <- xpathSApply(data3, "//row/zipcode", xmlValue)
length(zip_vector[zip_vector=='21231'])
fileUrl <- "
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(fileUrl, destfile = "./MOOCOURSE/GettingData/quiz1_5.csv")
fileUrl <- "
https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(fileUrl, destfile = "./MOOCOURSE/GettingData/quiz1_5.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv "
download.file(fileUrl, destfile = "./MOOCOURSE/GettingData/quiz1_5.csv")
data5<-fread("./MOOCOURSE/GettingData/quiz1_5.csv",
sep = ",", header=TRUE)
sapply(split(DT$pwgtp15,DT$SEX),mean)
DT<-fread("./MOOCOURSE/GettingData/quiz1_5.csv",
sep = ",", header=TRUE)
sapply(split(DT$pwgtp15,DT$SEX),mean)
tapply(DT$pwgtp15,DT$SEX,mean)
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
DT[,mean(pwgtp15),by=SEX]
mean(DT$pwgtp15,by=DT$SEX)
?replicate
system
system.time(replicate(race,
sapply(split(DT$pwgtp15,DT$SEX),mean)))
ace = 1000
race = 1000
system.time(replicate(race,
sapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(race,
tapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(race,
tapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(race,
tapply(split(DT$pwgtp15,DT$SEX),mean)))
system.time(replicate(race,
tapply(DT$pwgtp15,DT$SEX,mean),mean)  ))
system.time(replicate(race,
tapply(DT$pwgtp15,DT$SEX,mean),mean)  )
system.time(replicate(race,
DT[,mean(pwgtp15),by=SEX] )
)
##q1
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
weighted.mean(x,w)
##q2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lsfit(x,y,intercept = FALSE)
data(mtcars)
lm(mtcars$mpg~ mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
?par
postscript()
windows()
postscript()
postscript()
plot(x)
hist(x)
x<- rnorm(100)
hist(x)
with(x)
hist(x)
library(datasets)
hist(airquality$Ozone)  ## Draw a new plot
hist(x)
data()
hist(airquality$Ozone)  ## Draw a new plot
x<- rnorm(100)
hist(x)
postscript()
hist(x)
library(datasets)
data()
hist(airquality$Ozone)  ## Draw a new plot
hist(airquality$Ozone)  ## Draw a new plot
?postscript
dev.copy2pdf()
?dev.copy2pdf
x<- rnorm(100)
hist(x)
dev.copy2pdf()
png("haha")
x<- rnorm(100)
hist(x)
dev.copy2pdf()
swirl()
library("swirl")
rm(list=ls())
swirl()
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
## Experiment 1
### Test grammar
-unordered list item 1
-unordered list itme 2
-unordered 3
### Ordered list
1. ordered 1
2. ordered added
2. ordered original 2
3. ordered original 3
?plot
getwd()
setwd("/MOOCOURSE/Reproducible/Project1")
setwd("./MOOCOURSE/Reproducible/Project1")
data1 <-read.csv("activity.csv")
?mean
a <-c(1,2,3)
a.na <-c(1, 2, 3, NA)
mean(a.na)
mean1<-mean(data1$steps, na.rm = TRUE)
mean1
med1<-median(data1$steps, na.rm=TRUE)
med1
?hist
hist(data$steps, data$date )
hist(data1$steps, data1$date )
hist(data1$steps)
as.date(data1$date)
is.date(data1$date)
date(data1$date)
?date
format(data1$date, "%Y %M %S")
as.Date(data1$date)
head(data1)
hist(data1$steps~data$date)
hist(data1$steps~as.Number(data$date))
?as.number
as.Number
??as.number
hist(Sepal.Length~Species,data=iris)
head(iris)
hist(Sepal.Length~Species,data=iris)
## Add x-labels and use a pre-fix on the main labels
hist(Sepal.Length~Species,data=iris,xlab="Sepal Length (cm)",pre.main="Species==")
with(cars, plot(speed, dist)）
plot(speed, dist)
with(cars, plot(speed, dist)）
library(lattice)
state <-data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~Income | region, data = state, layout = c(4,1))
hist(airquality$Ozone)
with(airquality, plot(wind, Ozone))
with(airquality, plot(Wind, Ozone))
act<-transform(act, date = factor(date))
act<-read.csv("activity.csv")
act<-transform(act, date = factor(date))
hist(act$steps, act$date )
airquality <-transform(airquality, Month = factor (Month))
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
class(airquality$Month)
?transform
act<-read.csv("activity.csv")
class(act$date)
class(act$steps)
hist(Sepal.Length~Species,data=iris)
class(Sepal.Length)
library(iris)
data(iris)
hist(Sepal.Length~Species,data=iris)
par("lty")
par("mar")
with(airquality, plot(Wind, Ozone, main "Ozone and Wind in NYC"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in NYC"))
with(subset(airquality, Month=5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in NYC"))
with(subset(airquality, Month=5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = ""red"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = "red"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in NYC",type = "n"))
legend ("topright", pch = 1, col=c("blue", "red"), legend = c"May","Other Months"))
legend ("topright", pch = 1, col=c("blue", "red"), legend = c("May","Other Months"))
?legend
legend ("topright", pch = 1, col=c("blue", "red"), legend = c(1,2))
legend ("topright", pch = 1, col=c("blue", "red"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in NYC",type = "n"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month!=5), points(Wind, Ozone, col = "red"))
legend ("topright", pch = 1, col=c("blue", "red"), legend = c("May","Other Months"))
with(airquality, plot(Wind, Ozone, main="Ozone and Wind in NYC",pch = 20))
model <-lm(Ozone ~Wind, airquality)
abline(model, lwd = 4)
par(mfrow = c(1,2))
plot(Temp, Ozone, main ="Ozone and Temp")
?with
par(mfrow = c(1,3), mar  =c(4,4,2,1,), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main ="Ozone and Solar Radiation")
plot(Temp, Ozone, main ="Ozone and Temp")
mtext("Ozone, and Weather in NYC", outer = TRUE)
})
par(mfrow = c(1,3), mar  =c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main ="Ozone and Solar Radiation")
plot(Temp, Ozone, main ="Ozone and Temp")
mtext("Ozone, and Weather in NYC", outer = TRUE)
})
par(mfrow = c(1,3), mar  =c(4,4,2,1), oma = c(0,0,8,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main ="Ozone and Solar Radiation")
plot(Temp, Ozone, main ="Ozone and Temp")
mtext("Ozone, and Weather in NYC", outer = TRUE)
})
par(mfrow = c(1,3), mar  =c(4,4,2,1), oma = c(0,0,2,0))
with(airquality, {
plot(Wind, Ozone, main ="Ozone and Wind")
plot(Solar.R, Ozone, main ="Ozone and Solar Radiation")
plot(Temp, Ozone, main ="Ozone and Temp")
mtext("Ozone, and Weather in NYC", outer = TRUE)
})
example(points)
par(mfrow=c(1,1))
plot(x,y)
example(points)
act$date
act$steps
act$steps
